package com.lion.wandertrip.presentation.trip_note_detail_page.component

import android.util.Log
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Modifier
import androidx.compose.ui.input.pointer.PointerEventType
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.hilt.navigation.compose.hiltViewModel
import com.google.android.gms.maps.model.CameraPosition
import com.google.android.gms.maps.model.LatLng
import com.google.maps.android.compose.GoogleMap
import com.google.maps.android.compose.MapUiSettings
import com.google.maps.android.compose.Marker
import com.google.maps.android.compose.MarkerState
import com.google.maps.android.compose.rememberCameraPositionState
import com.google.maps.android.compose.rememberMarkerState
import com.lion.wandertrip.component.ScheduleDetailCustomMarkerIcon
import com.lion.wandertrip.model.ScheduleItem
import com.lion.wandertrip.presentation.trip_note_detail_page.TripNoteDetailViewModel

// Google MapÏùÑ ÌëúÏãúÌïòÎäî Composable
@Composable
fun TripNoteScheduleGoogleMap(
    scheduleItems: List<ScheduleItem>,
    tripNoteDetailViewModel: TripNoteDetailViewModel = hiltViewModel(),
) {
    Log.d("scheduleItems", "scheduleItems${scheduleItems}")
    val context = LocalContext.current
    val cameraPositionState = rememberCameraPositionState()

    val defaultLocation = LatLng(
        tripNoteDetailViewModel.tripNoteModelValue.value.lat,
        tripNoteDetailViewModel.tripNoteModelValue.value.lng
    )
    val centerLocation = if (scheduleItems.isNotEmpty()) {
        LatLng(scheduleItems.first().itemLatitude, scheduleItems.first().itemLongitude)
    } else defaultLocation

    LaunchedEffect(scheduleItems) {
        cameraPositionState.position = CameraPosition.fromLatLngZoom(centerLocation, 11f)
    }

    Box(
        modifier = Modifier
            .fillMaxSize()  // Î∂ÄÎ™® ÏòÅÏó≠ Í∞ÄÎìù Ï±ÑÏö∞Í∏∞
            .pointerInput(Unit) {  // ÌÑ∞Ïπò ÏûÖÎ†•ÏùÑ Í∞êÏßÄÌïòÍ∏∞ ÏúÑÌïú Modifier
                awaitPointerEventScope {  // Ïù¥Î≤§Ìä∏ ÎåÄÍ∏∞ Î∞è Ï≤òÎ¶¨ Î≤îÏúÑ ÏãúÏûë
                    while (true) {  // Î¨¥Ìïú Î£®ÌîÑÎ°ú ÏßÄÏÜçÏ†ÅÏúºÎ°ú ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
                        val event = awaitPointerEvent()  // Îã§Ïùå ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ ÎåÄÍ∏∞ Î∞è ÌöçÎìù

                        if (event.type == PointerEventType.Press) {
                            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÌôîÎ©¥ÏùÑ ÎàÑÎ•¥Í∏∞ ÏãúÏûëÌïú ÏãúÏ†ê (ÌÑ∞Ïπò ÏãúÏûë)
                            Log.d("MapTouch", "üü¢ ÏßÄÎèÑ ÌÑ∞Ïπò ÏãúÏûëÎê®")
                            tripNoteDetailViewModel.setMapTouched(true)  // ÌÑ∞Ïπò ÏÉÅÌÉú trueÎ°ú ÏÑ§Ï†ï
                        } else if (event.type == PointerEventType.Release || event.type == PointerEventType.Exit) {
                            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÌôîÎ©¥ÏóêÏÑú ÏÜêÏùÑ ÎóêÍ±∞ÎÇò (Release)
                            // ÌÑ∞ÏπòÍ∞Ä ÌôîÎ©¥ ÏòÅÏó≠ Î∞ñÏúºÎ°ú Î≤óÏñ¥ÎÇú Í≤ΩÏö∞ (Exit)
                            Log.d("MapTouch", "‚ö™Ô∏è ÏßÄÎèÑ ÌÑ∞Ïπò ÎÅùÎÇ®")
                            tripNoteDetailViewModel.setMapTouched(false)  // ÌÑ∞Ïπò ÏÉÅÌÉú falseÎ°ú ÏÑ§Ï†ï
                        }
                    }
                }
            }
    ) {
        GoogleMap(
            modifier = Modifier.fillMaxSize(),
            cameraPositionState = cameraPositionState,
            uiSettings = MapUiSettings(
                zoomControlsEnabled = false,
                zoomGesturesEnabled = true,
                scrollGesturesEnabled = true,
                compassEnabled = true
            )
        ) {
            scheduleItems.forEach { item ->
                Marker(
                    state = MarkerState(position = LatLng(item.itemLatitude, item.itemLongitude)),
                    title = item.itemTitle,
                    icon = ScheduleDetailCustomMarkerIcon(context, item.itemIndex)
                )
            }
        }
    }
}
